{"version":3,"sources":["components/Pawn.js","components/Square.js","components/Board.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Pawn","pawnColor","turn","currentPlayerAction","coordinates","updateCurrentPlayerAction","selectedPawnLocation","updateSelectedPawnLocation","useState","pawnClicked","setPawnClicked","className","onClick","event","stopPropagation","Square","color","occupied","legalMoves","movePawn","includes","Board","whitePawnPositions","blackPawnPositions","renderPawns","squareCoordinates","find","whitePawn","blackPawn","gameSpaces","Array","i","length","innerArrayLength","j","columns","0","1","2","3","4","5","6","7","rows","renderSquares","Game","setWhitePawnPositions","setBlackPawnPositions","setTurn","setCurrentPlayerAction","playerActions","setSelectedPawnLocation","setLegalMoves","jumpableOpponent","setjumpableOpponent","locationAfterJump","setlocationAfterJump","showLegalMoves","currentPawnSelected","showLegalMovesForPlayer","player","selectedPawnColumn","split","charCodeAt","selectedPawnRow","parseInt","columnOption1","String","fromCharCode","columnOption2","playerPawnPositions","opponentPawnPositions","directionOfPlay","rowOption","allLegalOptions","concat","opponentToJump","filter","option","forEach","opponent","opponentColumn","jumpToColumn","jumpToRow","jumpToCoordinates","legalOption","push","adjustLegalMovesForJumpableOpponents","lastAction","clickedSquareCoordinates","newWhitePawnPositions","currentPosition","newBlackPawnPositions","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1398627b.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nexport default function Pawn({ pawnColor,\n    turn,\n    currentPlayerAction,\n    coordinates, \n    updateCurrentPlayerAction, \n    selectedPawnLocation, \n    updateSelectedPawnLocation }) {\n\n    const [pawnClicked, setPawnClicked] = useState(false)\n\n    const handleClick = (event) => {\n        if (turn === pawnColor && currentPlayerAction === 'click pawn' && !selectedPawnLocation) {\n            event.stopPropagation()\n            setPawnClicked(!pawnClicked)\n            updateCurrentPlayerAction(currentPlayerAction)\n            updateSelectedPawnLocation(coordinates, pawnColor)\n        } else if (turn === pawnColor && currentPlayerAction === 'click square' && selectedPawnLocation === coordinates ) {\n            event.stopPropagation()\n            setPawnClicked(!pawnClicked)\n            updateCurrentPlayerAction(currentPlayerAction)\n            updateSelectedPawnLocation(coordinates, pawnColor)\n        }\n    }\n\n    return (\n        <div className={pawnClicked ? \"red\" : pawnColor} onClick={handleClick} >\n            \n        </div>\n    )\n}\n","import React from 'react';\nimport Pawn from './Pawn';\n\nexport default function Square({color, \n    occupied,\n    turn,\n    currentPlayerAction, \n    coordinates, \n    updateCurrentPlayerAction, \n    selectedPawnLocation, \n    updateSelectedPawnLocation, \n    legalMoves, \n    movePawn }) {\n\n    const renderPawns = () => {\n        if(occupied === 'white') {\n            return <Pawn pawnColor=\"white\" turn={turn} \n            currentPlayerAction={currentPlayerAction} \n            updateCurrentPlayerAction={updateCurrentPlayerAction}\n            coordinates={coordinates}\n            selectedPawnLocation={selectedPawnLocation}\n            updateSelectedPawnLocation={updateSelectedPawnLocation}\n            />\n        } else {\n            if (occupied === 'black') {\n                return <Pawn pawnColor=\"black\" turn={turn} \n                currentPlayerAction={currentPlayerAction} \n                updateCurrentPlayerAction={updateCurrentPlayerAction}\n                coordinates={coordinates}\n                selectedPawnLocation={selectedPawnLocation}\n                updateSelectedPawnLocation={updateSelectedPawnLocation}\n                />\n            }\n        }\n    }\n\n    const handleClick = (event) => {\n        event.stopPropagation()\n        movePawn(coordinates, occupied)\n    }\n\n    const highlightLegalMoves = () => {\n        if(legalMoves.includes(coordinates)) {\n            return(\"blue\")\n        } else {\n            return(color)\n        }\n    }\n\n    return (\n        <div className={highlightLegalMoves()} onClick={handleClick} >\n            {renderPawns()}\n        </div>\n    )\n}\n","import React from 'react';\nimport Square from './Square';\n\nexport default function Board({\n    whitePawnPositions, \n    blackPawnPositions, \n    currentPlayerAction, \n    legalMoves, \n    turn,\n    updateCurrentPlayerAction,\n    selectedPawnLocation, \n    updateSelectedPawnLocation, \n    movePawn }) {\n    \n    const renderPawns = (squareCoordinates) => {\n        if(whitePawnPositions.find(whitePawn => whitePawn === squareCoordinates)) {\n            return 'white'\n        } else if (blackPawnPositions.find(blackPawn => blackPawn === squareCoordinates)) {\n            return 'black'\n        }\n    }\n\n    const renderSquares = () => {\n        let gameSpaces = new Array(8)\n\n        for (let i = 0; i < gameSpaces.length; i++) {\n            gameSpaces[i] = new Array(8)\n        }\n\n        for (let i = 0; i < gameSpaces.length; i++) {\n            const innerArrayLength = gameSpaces[i].length\n            for (let j = 0; j < innerArrayLength; j++) {\n                const color = (i + j) % 2 === 0 ? \"beige\" : \"green\"\n                const columns = {\n                    0: \"a\",\n                    1: \"b\",\n                    2: \"c\",\n                    3: \"d\",\n                    4: \"e\",\n                    5: \"f\",\n                    6: \"g\",\n                    7: \"h\",\n                }\n                const rows = {\n                    0: \"1\",\n                    1: \"2\",\n                    2: \"3\",\n                    3: \"4\",\n                    4: \"5\",\n                    5: \"6\",\n                    6: \"7\",\n                    7: \"8\",\n                }\n\n                gameSpaces[i][j] = <Square \n                    key={`${i}${j}`}\n                    coordinates={`${columns[j]}${rows[i]}`}\n                    color={color}\n                    occupied={renderPawns(`${columns[j]}${rows[i]}`)}\n                    turn={turn}\n                    currentPlayerAction={currentPlayerAction}\n                    legalMoves={legalMoves}\n                    updateCurrentPlayerAction={updateCurrentPlayerAction}\n                    selectedPawnLocation={selectedPawnLocation}\n                    updateSelectedPawnLocation={updateSelectedPawnLocation}\n                    movePawn={movePawn}\n                /> \n            }\n        }\n        return(gameSpaces)\n    }\n\n    return (\n        <div className=\"board-container\">\n            {renderSquares()}\n        </div>\n    )\n}\n","import React, { useState } from 'react';\nimport './Game.css'\nimport Board from './Board';\n\nexport default function Game() {\n\n    // game state\n\n    const [whitePawnPositions, setWhitePawnPositions] = useState([\"b1\", \"d1\", \"f1\", \"h1\", \n    \"a2\", \"c2\", \"e2\", \"g2\",\n    \"b3\", \"d3\", \"f3\", \"h3\"])\n\n    const [blackPawnPositions, setBlackPawnPositions] = useState([\"a6\", \"c6\", \"e6\", \"g6\",\n    \"b7\", \"d7\", \"f7\", \"h7\",\n    \"a8\", \"c8\", \"e8\", \"g8\"])\n\n    const [turn, setTurn] = useState(\"white\")\n\n    const [currentPlayerAction, setCurrentPlayerAction] = useState('click pawn')\n\n    const playerActions = {\n        \"click square\": \"click pawn\",\n        \"click pawn\": \"click square\",\n    }\n\n    const [selectedPawnLocation, setSelectedPawnLocation] = useState(\"\")\n\n    const [legalMoves, setLegalMoves] = useState([])\n\n    const [jumpableOpponent, setjumpableOpponent] = useState(\"\")\n\n    const [locationAfterJump, setlocationAfterJump] = useState(\"\")\n\n    // game logic\n\n\n    const updateCurrentPlayerAction = (lastAction) => {\n        setCurrentPlayerAction(playerActions[lastAction])\n    }\n\n\n    const updateSelectedPawnLocation = (currentPawnSelected, pawnColor) => {\n        if (currentPawnSelected === selectedPawnLocation) {\n            setSelectedPawnLocation('')\n            setLegalMoves([])\n        } else {\n            setSelectedPawnLocation(currentPawnSelected)\n            showLegalMoves(currentPawnSelected, pawnColor)\n        }\n    }\n\n\n    const showLegalMoves = (currentPawnSelected, pawnColor) => {\n        if(pawnColor === 'white') {\n            showLegalMovesForPlayer(\"white\", currentPawnSelected)\n        }\n        if(pawnColor === 'black') {\n            showLegalMovesForPlayer(\"black\", currentPawnSelected)\n        }\n    }\n\n\n    const adjustLegalMovesForJumpableOpponents = (opponentToJump, selectedPawnColumn, selectedPawnRow, directionOfPlay, allLegalOptions) => {\n        opponentToJump.forEach((opponent) => {\n            const opponentColumn = opponent.split(\"\")[0].charCodeAt(0)\n            const offsetFromSelectedPawn = opponentColumn - selectedPawnColumn\n\n            const jumpToColumn = selectedPawnColumn + (offsetFromSelectedPawn * 2)\n            const jumpToRow = parseInt(selectedPawnRow) + 2 * directionOfPlay\n            const jumpToCoordinates = String.fromCharCode(jumpToColumn).concat(jumpToRow)\n\n            allLegalOptions = allLegalOptions.filter(legalOption => legalOption !== opponent)\n\n            allLegalOptions.push(jumpToCoordinates)\n\n            setlocationAfterJump(jumpToCoordinates)\n        })\n        return allLegalOptions;\n    }\n\n    \n    const showLegalMovesForPlayer = (player, currentPawnSelected) => {\n        const selectedPawnColumn = currentPawnSelected.split(\"\")[0].charCodeAt(0)\n        const selectedPawnRow = parseInt(currentPawnSelected.split(\"\")[1])\n        const columnOption1 = String.fromCharCode(selectedPawnColumn - 1)\n        const columnOption2 = String.fromCharCode(selectedPawnColumn + 1)\n        \n        const playerPawnPositions = player === 'white' ? whitePawnPositions : blackPawnPositions;\n        const opponentPawnPositions = player === 'white' ? blackPawnPositions : whitePawnPositions;\n        const directionOfPlay = player === 'white' ? 1 : -1;\n\n        const rowOption = selectedPawnRow + 1 * directionOfPlay\n        const legalOption1 = columnOption1.concat(rowOption)\n        const legalOption2 = columnOption2.concat(rowOption)\n        let allLegalOptions = [legalOption1, legalOption2]\n        const opponentToJump = allLegalOptions.filter(option => opponentPawnPositions.includes(option))\n\n        if(opponentToJump){\n            allLegalOptions = adjustLegalMovesForJumpableOpponents(opponentToJump, selectedPawnColumn, selectedPawnRow, directionOfPlay, allLegalOptions)\n        }\n\n        allLegalOptions = allLegalOptions.filter(legalOption => opponentPawnPositions.includes(legalOption) === false && playerPawnPositions.includes(legalOption) === false)\n\n        setjumpableOpponent(opponentToJump)\n        setLegalMoves(allLegalOptions)\n        setCurrentPlayerAction(playerActions[currentPlayerAction])\n    }\n\n\n    const movePawn  = (clickedSquareCoordinates) => {\n        if(legalMoves.find(legalOption => legalOption === clickedSquareCoordinates)) {\n            if(turn === 'white') {\n                const newWhitePawnPositions = whitePawnPositions.filter(currentPosition => currentPosition !== selectedPawnLocation)\n                newWhitePawnPositions.push(clickedSquareCoordinates)\n\n            if (turn === 'white' && clickedSquareCoordinates === locationAfterJump) {\n                const newBlackPawnPositions = blackPawnPositions.filter(blackPawn => jumpableOpponent.includes(blackPawn) === false)\n                console.log(\"filter black pieces\")\n                setBlackPawnPositions(newBlackPawnPositions)\n            }\n                setWhitePawnPositions(newWhitePawnPositions)\n                setSelectedPawnLocation(\"\")\n                setLegalMoves([])\n                setTurn('black')\n                setCurrentPlayerAction(playerActions[currentPlayerAction])\n\n            } else if(turn === 'black') {\n                const newBlackPawnPositions = blackPawnPositions.filter(currentPosition => currentPosition !== selectedPawnLocation)\n                newBlackPawnPositions.push(clickedSquareCoordinates)\n                \n                if(turn === 'black' && clickedSquareCoordinates === locationAfterJump) {\n                    const newWhitePawnPositions = whitePawnPositions.filter(whitePawn => jumpableOpponent.includes(whitePawn) === false)\n                    console.log(\"filter White pieces\")\n                    setWhitePawnPositions(newWhitePawnPositions)\n                }\n                setBlackPawnPositions(newBlackPawnPositions)\n                setSelectedPawnLocation(\"\")\n                setLegalMoves([])\n                setTurn('white')\n                setCurrentPlayerAction(playerActions[currentPlayerAction])\n            }\n        }\n    }\n\n\n    return (\n        <div>\n            <Board whitePawnPositions={whitePawnPositions}\n            blackPawnPositions={blackPawnPositions}\n            turn={turn}\n            currentPlayerAction={currentPlayerAction}\n            legalMoves={legalMoves}\n            updateCurrentPlayerAction={updateCurrentPlayerAction}\n            selectedPawnLocation={selectedPawnLocation}\n            updateSelectedPawnLocation={updateSelectedPawnLocation}\n            movePawn={movePawn}\n            />\n        </div>\n    )\n}\n\n","import './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <h1>Checkers App</h1>\n        <Game />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}